basePath: /
definitions:
  controllers.loginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  controllers.loginUserResponse:
    properties:
      token:
        type: string
    type: object
  controllers.registerUserRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 6
        type: string
      username:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  controllers.registerUserResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      id:
        type: integer
      ingredients:
        items:
          $ref: '#/definitions/models.Ingredient'
        type: array
      recipes:
        items:
          $ref: '#/definitions/models.Recipe'
        type: array
      role:
        $ref: '#/definitions/models.Role'
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      units:
        items:
          $ref: '#/definitions/models.Unit'
        type: array
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.Ingredient:
    properties:
      category:
        $ref: '#/definitions/models.IngredientsCategory'
      category_id:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      icon:
        type: string
      id:
        type: integer
      is_system_ingredient:
        type: boolean
      name:
        type: string
      recipe_ingredients:
        items:
          $ref: '#/definitions/models.RecipeIngredient'
        type: array
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.IngredientsCategory:
    properties:
      category:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  models.Recipe:
    properties:
      body:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: integer
      link:
        type: string
      recipe_ingredients:
        items:
          $ref: '#/definitions/models.RecipeIngredient'
        type: array
      recipe_tags:
        items:
          $ref: '#/definitions/models.RecipeTag'
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.RecipeIngredient:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      ingredient:
        $ref: '#/definitions/models.Ingredient'
      ingredient_id:
        type: integer
      quantity:
        type: number
      recipe_id:
        type: integer
      unit:
        $ref: '#/definitions/models.Unit'
      unit_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.RecipeTag:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      recipe:
        $ref: '#/definitions/models.Recipe'
      recipe_id:
        type: integer
      tag:
        $ref: '#/definitions/models.Tag'
      tag_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - ADMIN
    - USER
  models.System:
    enum:
    - METRIC
    - FARENHEIT
    type: string
    x-enum-varnames:
    - METRIC
    - FARENHEIT
  models.Tag:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      is_system_tag:
        type: boolean
      name:
        type: string
      recipeTags:
        items:
          $ref: '#/definitions/models.RecipeTag'
        type: array
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.Type:
    enum:
    - WEIGHT
    - VOLUME
    - TEMPERATURE
    type: string
    x-enum-varnames:
    - WEIGHT
    - VOLUME
    - TEMPERATURE
  models.Unit:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: integer
      is_system_unit:
        type: boolean
      name:
        type: string
      recipeIngredients:
        items:
          $ref: '#/definitions/models.RecipeIngredient'
        type: array
      symbol:
        type: string
      system:
        $ref: '#/definitions/models.System'
      type:
        $ref: '#/definitions/models.Type'
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
info:
  contact:
    name: Felipe Seda
  description: API for CookBooked, a recipe management app.
  license:
    name: MIT
  title: CookBooked API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs an existing user into the app
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.loginUserResponse'
      summary: Login into the app
      tags:
      - users
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user in the app
      parameters:
      - description: New user credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.registerUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.registerUserResponse'
      summary: Register user in the app
      tags:
      - users
swagger: "2.0"
