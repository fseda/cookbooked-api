basePath: /
definitions:
  controllers.loginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  controllers.loginUserResponse:
    properties:
      token:
        type: string
    type: object
  controllers.registerUserRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 6
        type: string
      username:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  controllers.registerUserResponse:
    properties:
      token:
        type: string
    type: object
  controllers.userProfileResponse:
    properties:
      email:
        type: string
      role:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  httpstatus.GlobalErrorHandlerResp:
    properties:
      message:
        example: Error message
        type: string
      success:
        example: false
        type: boolean
    type: object
info:
  contact:
    name: Felipe Seda
  description: API for CookBooked, a recipe management app.
  license:
    name: MIT
  title: CookBooked API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs an existing user into the app
      parameters:
      - description: User credentials
        in: body
        name: user-credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.loginUserResponse'
      summary: Login user into the app
      tags:
      - Users
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user in the app
      parameters:
      - description: New user credentials
        in: body
        name: user-info
        required: true
        schema:
          $ref: '#/definitions/controllers.registerUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully, returns jwt token
          schema:
            $ref: '#/definitions/controllers.registerUserResponse'
      summary: Register user in the app
      tags:
      - Users
  /me:
    delete:
      description: Delete the account of the authenticated user.
      operationId: delete-user-by-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Invalid id. Should be a positive integer.
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "500":
          description: Could not delete user.
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Delete logged-in user's account
      tags:
      - Users
    get:
      description: Retrieve the profile of the currently authenticated user.
      operationId: get-user-profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - Bearer: []
      summary: Get logged in user's profile
      tags:
      - Users
  /users/{id}:
    get:
      description: Retrieve detailed information of a user based on their ID.
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userProfileResponse'
        "400":
          description: User not Found
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - Bearer: []
      summary: Get user by ID
      tags:
      - Users
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
