basePath: /
definitions:
  controllers.createRecipeRequest:
    properties:
      body:
        type: string
      description:
        type: string
      link:
        type: string
      tag_ids:
        items:
          type: integer
        type: array
      title:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  controllers.getAllRecipesResponse:
    properties:
      recipes:
        items:
          $ref: '#/definitions/controllers.getRecipeResponse'
        type: array
    type: object
  controllers.getRecipeDetailsResponse:
    properties:
      body:
        type: string
      description:
        type: string
      id:
        type: integer
      link:
        type: string
      title:
        type: string
    type: object
  controllers.getRecipeResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  controllers.loginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  controllers.registerUserRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 4
        type: string
      username:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  controllers.updateRecipeRequest:
    properties:
      body:
        type: string
      description:
        type: string
      link:
        type: string
      title:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  controllers.userProfileResponse:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      email:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  httpstatus.GlobalErrorHandlerResp:
    properties:
      message:
        example: Error message
        type: string
      success:
        example: false
        type: boolean
    type: object
info:
  contact:
    name: Felipe Seda
  description: API for CookBooked, a recipe management app.
  license:
    name: MIT
  title: CookBooked API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs an existing user into the app
      parameters:
      - description: User credentials
        in: body
        name: user-credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.loginUserRequest'
      responses:
        "200":
          description: OK
          headers:
            Authorization:
              description: Bearer <token>
              type: string
      summary: Login user into the app
      tags:
      - Users
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user in the app
      parameters:
      - description: New user credentials
        in: body
        name: user-info
        required: true
        schema:
          $ref: '#/definitions/controllers.registerUserRequest'
      responses:
        "201":
          description: Created
          headers:
            Authorization:
              description: Bearer <token>
              type: string
      summary: Register user in the app
      tags:
      - Users
  /auth/validate:
    get:
      description: Validate the JWT provided in the Authorization header
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Validate JWT
      tags:
      - auth
  /me:
    delete:
      description: Delete the account of the authenticated user.
      operationId: delete-user-by-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Invalid id. Should be a positive integer.
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "500":
          description: Could not delete user.
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Delete logged-in user's account
      tags:
      - Users
    get:
      description: Retrieve the profile of the currently authenticated user.
      operationId: get-user-profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Get logged in user's profile
      tags:
      - Users
  /recipes:
    get:
      description: Get all recipes from a user, by user id
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.getAllRecipesResponse'
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Get all recipes from a user
      tags:
      - Recipes
  /recipes/{recipe_id}:
    delete:
      description: Delete a recipe, by recipe id
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Delete a recipe
      tags:
      - Recipes
    get:
      description: Get a recipe details, by recipe id
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.getRecipeDetailsResponse'
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Get a recipe details
      tags:
      - Recipes
    patch:
      consumes:
      - application/json
      description: Update recipe details, by recipe id
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      - description: Recipe update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.updateRecipeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.updateRecipeRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Update recipe details
      tags:
      - Recipes
  /recipes/new:
    post:
      consumes:
      - application/json
      description: Create a new recipe with the given input data
      parameters:
      - description: Recipe creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.createRecipeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.createRecipeRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Create a new recipe
      tags:
      - Recipes
  /users/{id}:
    get:
      description: Retrieve detailed information of a user based on their ID.
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userProfileResponse'
        "400":
          description: User not Found
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - Users
  /users/exists:
    get:
      description: Check if a user exists by their username or email.
      operationId: check-user-exists-by-username-or-email
      parameters:
      - description: username
        in: query
        name: username
        type: string
      - description: email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses: {}
      summary: Check if user exists
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
