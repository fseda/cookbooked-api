basePath: /
definitions:
  controllers.createRecipeRequest:
    properties:
      body:
        type: string
      description:
        type: string
      link:
        type: string
      recipe_ingredients:
        items:
          $ref: '#/definitions/controllers.recipeIngredientRequest'
        type: array
      tag_ids:
        items:
          type: integer
        type: array
      title:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  controllers.getAllRecipesResponse:
    properties:
      recipes:
        items:
          $ref: '#/definitions/controllers.getRecipeResponse'
        type: array
    type: object
  controllers.getRecipeDetailsResponse:
    properties:
      body:
        type: string
      description:
        type: string
      id:
        type: integer
      link:
        type: string
      recipe_ingredients:
        items:
          $ref: '#/definitions/models.RecipeIngredient'
        type: array
      title:
        type: string
    type: object
  controllers.getRecipeResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  controllers.ingredientResponse:
    properties:
      category:
        $ref: '#/definitions/models.IngredientsCategory'
      category_id:
        type: integer
      icon:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  controllers.ingredientsResponse:
    properties:
      ingredients:
        items:
          $ref: '#/definitions/controllers.ingredientResponse'
        type: array
    type: object
  controllers.loginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  controllers.recipeIngredientRequest:
    properties:
      ingredient_id:
        type: integer
      quantity:
        type: number
      unit_id:
        type: integer
    type: object
  controllers.recipeIngredientsRequest:
    properties:
      recipe_ingredients:
        items:
          $ref: '#/definitions/controllers.recipeIngredientRequest'
        type: array
    type: object
  controllers.registerUserRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 72
        minLength: 4
        type: string
      username:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  controllers.unitResponse:
    properties:
      id:
        type: integer
      name:
        type: string
      symbol:
        type: string
      type:
        $ref: '#/definitions/models.Type'
    type: object
  controllers.unitsResponse:
    properties:
      units:
        items:
          $ref: '#/definitions/controllers.unitResponse'
        type: array
    type: object
  controllers.updateRecipeRequest:
    properties:
      body:
        type: string
      description:
        type: string
      link:
        type: string
      title:
        maxLength: 255
        minLength: 3
        type: string
    type: object
  controllers.userProfileResponse:
    properties:
      email:
        type: string
      role:
        type: string
      user_id:
        type: integer
      username:
        type: string
    type: object
  httpstatus.GlobalErrorHandlerResp:
    properties:
      message:
        example: Error message
        type: string
      success:
        example: false
        type: boolean
    type: object
  models.Ingredient:
    properties:
      category:
        $ref: '#/definitions/models.IngredientsCategory'
      category_id:
        type: integer
      icon:
        type: string
      id:
        type: integer
      is_system_ingredient:
        type: boolean
      name:
        type: string
      recipe_ingredients:
        items:
          $ref: '#/definitions/models.RecipeIngredient'
        type: array
      user_id:
        type: integer
    type: object
  models.IngredientsCategory:
    properties:
      category:
        type: string
      description:
        type: string
      id:
        type: integer
    type: object
  models.RecipeIngredient:
    properties:
      id:
        type: integer
      ingredient:
        $ref: '#/definitions/models.Ingredient'
      ingredient_id:
        type: integer
      quantity:
        type: number
      recipe_id:
        type: integer
      unit:
        $ref: '#/definitions/models.Unit'
      unit_id:
        type: integer
    type: object
  models.System:
    enum:
    - metric
    - farenheit
    type: string
    x-enum-varnames:
    - METRIC
    - FARENHEIT
  models.Type:
    enum:
    - weight
    - volume
    - temperature
    type: string
    x-enum-varnames:
    - WEIGHT
    - VOLUME
    - TEMPERATURE
  models.Unit:
    properties:
      id:
        type: integer
      is_system_unit:
        type: boolean
      name:
        type: string
      recipeIngredients:
        items:
          $ref: '#/definitions/models.RecipeIngredient'
        type: array
      symbol:
        type: string
      system:
        $ref: '#/definitions/models.System'
      type:
        $ref: '#/definitions/models.Type'
      user_id:
        type: integer
    type: object
info:
  contact:
    name: Felipe Seda
  description: API for CookBooked, a recipe management app.
  license:
    name: MIT
  title: CookBooked API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Logs an existing user into the app
      parameters:
      - description: User credentials
        in: body
        name: user-credentials
        required: true
        schema:
          $ref: '#/definitions/controllers.loginUserRequest'
      responses:
        "200":
          description: OK
          headers:
            Authorization:
              description: Bearer <token>
              type: string
      summary: Login user into the app
      tags:
      - Users
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Registers a new user in the app
      parameters:
      - description: New user credentials
        in: body
        name: user-info
        required: true
        schema:
          $ref: '#/definitions/controllers.registerUserRequest'
      responses:
        "201":
          description: Created
          headers:
            Authorization:
              description: Bearer <token>
              type: string
      summary: Register user in the app
      tags:
      - Users
  /auth/validate:
    get:
      description: Validate the JWT provided in the Authorization header
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "401":
          description: Unauthorized
      security:
      - ApiKeyAuth: []
      summary: Validate JWT
      tags:
      - auth
  /ingredients:
    get:
      description: Get all ingredients
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ingredientsResponse'
      summary: Get all ingredients
      tags:
      - Ingredients
  /me:
    delete:
      description: Delete the account of the authenticated user.
      operationId: delete-user-by-id
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "204":
          description: No Content
        "400":
          description: Invalid id. Should be a positive integer.
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "500":
          description: Could not delete user.
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Delete logged-in user's account
      tags:
      - Users
    get:
      description: Retrieve the profile of the currently authenticated user.
      operationId: get-user-profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userProfileResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Get logged in user's profile
      tags:
      - Users
  /recipes:
    get:
      description: Get all recipes from a user, by user id
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.getAllRecipesResponse'
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Get all recipes from a user
      tags:
      - Recipes
  /recipes/{recipe_id}:
    delete:
      description: Delete a recipe, by recipe id
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Delete a recipe
      tags:
      - Recipes
    get:
      description: Get a recipe details, by recipe id
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.getRecipeDetailsResponse'
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Get a recipe details
      tags:
      - Recipes
    patch:
      consumes:
      - application/json
      description: Update recipe details, by recipe id
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      - description: Recipe update data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.updateRecipeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.updateRecipeRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Update recipe details
      tags:
      - Recipes
  /recipes/{recipe_id}/ingredients:
    patch:
      consumes:
      - application/json
      description: Set multiple ingredients to a recipe, completely replace the ingredients
        of a recipe (recommended)
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      - description: Recipe ingredients data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.recipeIngredientsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Set multiple ingredients to a recipe
      tags:
      - Recipes
  /recipes/{recipe_id}/ingredients/{recipe_ingredient_id}:
    delete:
      description: Remove an ingredient from a recipe
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      - description: Recipe ingredient ID
        in: path
        name: recipe_ingredient_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Remove an ingredient from a recipe
      tags:
      - Recipes
  /recipes/{recipe_id}/ingredients/add:
    patch:
      consumes:
      - application/json
      description: Add multiple ingredients to a recipe, if it exists in the recipe
        update
      parameters:
      - description: Recipe ID
        in: path
        name: recipe_id
        required: true
        type: integer
      - description: Recipe ingredients data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.recipeIngredientsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      security:
      - ApiKeyAuth: []
      summary: Add multiple ingredients to a recipe
      tags:
      - Recipes
  /recipes/new:
    post:
      consumes:
      - application/json
      description: Create a new recipe with the given input data
      parameters:
      - description: Recipe creation data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.createRecipeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.createRecipeRequest'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Create a new recipe
      tags:
      - Recipes
  /units:
    get:
      description: Get all units
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.unitsResponse'
      summary: Get all units
      tags:
      - Units
  /users/{id}:
    get:
      description: Retrieve detailed information of a user based on their ID.
      operationId: get-user-by-id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userProfileResponse'
        "400":
          description: User not Found
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpstatus.GlobalErrorHandlerResp'
      security:
      - ApiKeyAuth: []
      summary: Get user by ID
      tags:
      - Users
  /users/exists:
    get:
      description: Check if a user exists by their username or email.
      operationId: check-user-exists-by-username-or-email
      parameters:
      - description: username
        in: query
        name: username
        type: string
      - description: email
        in: query
        name: email
        type: string
      produces:
      - application/json
      responses: {}
      summary: Check if user exists
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
